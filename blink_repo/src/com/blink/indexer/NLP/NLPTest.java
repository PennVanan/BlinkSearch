package com.blink.indexer.NLP;

import static org.junit.Assert.*;

import org.junit.Test;

public class NLPTest {

	@Test
	public void test() {
		NLP nlp = new NLP();
		nlp.tokenize("This semester, I took a software engineering course which centered around the internal and external metrics of software quality as defined by ISO-9126. One of the external metrics was security. For software to be considered secure, it has to verify data is only accessible by authorized users and that code cannot be manipulated by outside sources. My professor showed us a few ways we could exploit programs in Java. Suddenly, everyone in the class realized how all the programs we’d written throughout our careers as students (and possibly during our internships) were horribly insecure (Thanks, Java. Why SecurityManager is disabled by default, I’ll never understand). And this was just in Java. What back doors exist in other programming languages? Most university computer science programs have a computer and network security course. Unfortunately, it’s usually an elective rather than a required course. Just do a Google search for “required computer science courses”. You’ll see a list of university web sites, all of which list computer security as an elective course. Digging further, what do students who take these computer security courses actually learn? Examining a wide variety of universities, the descriptions of these courses vary greatly. Some, like the University of Colorado Boulder give students hands-on experiences with finding and exploiting vulnerabilities. Right next door, Colorado State University’s computer security course states, “In this course, we will begin by investigating some of the security measures that can be employed to safeguard information. For the most part we will look into the theory that goes into designing these measures rather than studying security tools and techniques. This is primarily because there are too many of those tools out there and they are changing frequently.” Does a course that focuses more on theory than practice do a disservice to future software developers? Will Colorado State University’s students create programs be as secure as say, the ones created by UC Boulder students who took Security Laboratory? Untraditional Routes: Learn To Code, Not Learn To Code Securely More and more people are taking different, untraditional routes into computer science. While it seems that teaching students how to write secure software is optional at the university level, these other paths into computer science seem to offer no instruction about writing secure software. Take, for example, the well-respected Flatiron School in New York. Nowhere in their curriculum do they discuss security. The focus is on learning new technologies and writing code that works. Their graduates go off to work at well-known companies, just like university students, none-the-wiser about writing secure code. Many other people are taking advantage of free online courses to teach themselves how to code. They could take this Coursera course on computer security, but the recommended background is for someone with a solid foundation in computer science, not someone trying to learn computer science on their own. I’ll bet most self-learners won’t be considering this course. The question is, will those already entrenched in computer science be motivated to take this course?");
		assertEquals(1, 1);
	}

}
