package com.blink.avro;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DocumentSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DocumentSchema\",\"fields\":[{\"name\":\"docID\",\"type\":\"long\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"filetype\",\"type\":\"string\",\"default\":\"html\"},{\"name\":\"charset\",\"type\":\"string\",\"default\":\"UTF-8\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long docID;
  @Deprecated public java.lang.CharSequence content;
  @Deprecated public java.lang.CharSequence filetype;
  @Deprecated public java.lang.CharSequence charset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DocumentSchema() {}

  /**
   * All-args constructor.
   */
  public DocumentSchema(java.lang.Long docID, java.lang.CharSequence content, java.lang.CharSequence filetype, java.lang.CharSequence charset) {
    this.docID = docID;
    this.content = content;
    this.filetype = filetype;
    this.charset = charset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return docID;
    case 1: return content;
    case 2: return filetype;
    case 3: return charset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: docID = (java.lang.Long)value$; break;
    case 1: content = (java.lang.CharSequence)value$; break;
    case 2: filetype = (java.lang.CharSequence)value$; break;
    case 3: charset = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'docID' field.
   */
  public java.lang.Long getDocID() {
    return docID;
  }

  /**
   * Sets the value of the 'docID' field.
   * @param value the value to set.
   */
  public void setDocID(java.lang.Long value) {
    this.docID = value;
  }

  /**
   * Gets the value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /**
   * Gets the value of the 'filetype' field.
   */
  public java.lang.CharSequence getFiletype() {
    return filetype;
  }

  /**
   * Sets the value of the 'filetype' field.
   * @param value the value to set.
   */
  public void setFiletype(java.lang.CharSequence value) {
    this.filetype = value;
  }

  /**
   * Gets the value of the 'charset' field.
   */
  public java.lang.CharSequence getCharset() {
    return charset;
  }

  /**
   * Sets the value of the 'charset' field.
   * @param value the value to set.
   */
  public void setCharset(java.lang.CharSequence value) {
    this.charset = value;
  }

  /** Creates a new DocumentSchema RecordBuilder */
  public static DocumentSchema.Builder newBuilder() {
    return new DocumentSchema.Builder();
  }
  
  /** Creates a new DocumentSchema RecordBuilder by copying an existing Builder */
  public static DocumentSchema.Builder newBuilder(DocumentSchema.Builder other) {
    return new DocumentSchema.Builder(other);
  }
  
  /** Creates a new DocumentSchema RecordBuilder by copying an existing DocumentSchema instance */
  public static DocumentSchema.Builder newBuilder(DocumentSchema other) {
    return new DocumentSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for DocumentSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DocumentSchema>
    implements org.apache.avro.data.RecordBuilder<DocumentSchema> {

    private long docID;
    private java.lang.CharSequence content;
    private java.lang.CharSequence filetype;
    private java.lang.CharSequence charset;

    /** Creates a new Builder */
    private Builder() {
      super(DocumentSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(DocumentSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.docID)) {
        this.docID = data().deepCopy(fields()[0].schema(), other.docID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.content)) {
        this.content = data().deepCopy(fields()[1].schema(), other.content);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filetype)) {
        this.filetype = data().deepCopy(fields()[2].schema(), other.filetype);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charset)) {
        this.charset = data().deepCopy(fields()[3].schema(), other.charset);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DocumentSchema instance */
    private Builder(DocumentSchema other) {
            super(DocumentSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.docID)) {
        this.docID = data().deepCopy(fields()[0].schema(), other.docID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.content)) {
        this.content = data().deepCopy(fields()[1].schema(), other.content);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filetype)) {
        this.filetype = data().deepCopy(fields()[2].schema(), other.filetype);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charset)) {
        this.charset = data().deepCopy(fields()[3].schema(), other.charset);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'docID' field */
    public java.lang.Long getDocID() {
      return docID;
    }
    
    /** Sets the value of the 'docID' field */
    public DocumentSchema.Builder setDocID(long value) {
      validate(fields()[0], value);
      this.docID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'docID' field has been set */
    public boolean hasDocID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'docID' field */
    public DocumentSchema.Builder clearDocID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'content' field */
    public java.lang.CharSequence getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public DocumentSchema.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.content = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'content' field */
    public DocumentSchema.Builder clearContent() {
      content = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'filetype' field */
    public java.lang.CharSequence getFiletype() {
      return filetype;
    }
    
    /** Sets the value of the 'filetype' field */
    public DocumentSchema.Builder setFiletype(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.filetype = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'filetype' field has been set */
    public boolean hasFiletype() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'filetype' field */
    public DocumentSchema.Builder clearFiletype() {
      filetype = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'charset' field */
    public java.lang.CharSequence getCharset() {
      return charset;
    }
    
    /** Sets the value of the 'charset' field */
    public DocumentSchema.Builder setCharset(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.charset = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'charset' field has been set */
    public boolean hasCharset() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'charset' field */
    public DocumentSchema.Builder clearCharset() {
      charset = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public DocumentSchema build() {
      try {
        DocumentSchema record = new DocumentSchema();
        record.docID = fieldSetFlags()[0] ? this.docID : (java.lang.Long) defaultValue(fields()[0]);
        record.content = fieldSetFlags()[1] ? this.content : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.filetype = fieldSetFlags()[2] ? this.filetype : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.charset = fieldSetFlags()[3] ? this.charset : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
