package com.blink.avro;

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RankerSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RankerSchema\",\"fields\":[{\"name\":\"docID\",\"type\":\"long\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"outlinks\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long docID;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.util.List<java.lang.CharSequence> outlinks;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RankerSchema() {}

  /**
   * All-args constructor.
   */
  public RankerSchema(java.lang.Long docID, java.lang.CharSequence url, java.util.List<java.lang.CharSequence> outlinks) {
    this.docID = docID;
    this.url = url;
    this.outlinks = outlinks;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return docID;
    case 1: return url;
    case 2: return outlinks;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: docID = (java.lang.Long)value$; break;
    case 1: url = (java.lang.CharSequence)value$; break;
    case 2: outlinks = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'docID' field.
   */
  public java.lang.Long getDocID() {
    return docID;
  }

  /**
   * Sets the value of the 'docID' field.
   * @param value the value to set.
   */
  public void setDocID(java.lang.Long value) {
    this.docID = value;
  }

  /**
   * Gets the value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'outlinks' field.
   */
  public java.util.List<java.lang.CharSequence> getOutlinks() {
    return outlinks;
  }

  /**
   * Sets the value of the 'outlinks' field.
   * @param value the value to set.
   */
  public void setOutlinks(java.util.List<java.lang.CharSequence> value) {
    this.outlinks = value;
  }

  /** Creates a new RankerSchema RecordBuilder */
  public static RankerSchema.Builder newBuilder() {
    return new RankerSchema.Builder();
  }
  
  /** Creates a new RankerSchema RecordBuilder by copying an existing Builder */
  public static RankerSchema.Builder newBuilder(RankerSchema.Builder other) {
    return new RankerSchema.Builder(other);
  }
  
  /** Creates a new RankerSchema RecordBuilder by copying an existing RankerSchema instance */
  public static RankerSchema.Builder newBuilder(RankerSchema other) {
    return new RankerSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for RankerSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RankerSchema>
    implements org.apache.avro.data.RecordBuilder<RankerSchema> {

    private long docID;
    private java.lang.CharSequence url;
    private java.util.List<java.lang.CharSequence> outlinks;

    /** Creates a new Builder */
    private Builder() {
      super(RankerSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(RankerSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.docID)) {
        this.docID = data().deepCopy(fields()[0].schema(), other.docID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outlinks)) {
        this.outlinks = data().deepCopy(fields()[2].schema(), other.outlinks);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RankerSchema instance */
    private Builder(RankerSchema other) {
            super(RankerSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.docID)) {
        this.docID = data().deepCopy(fields()[0].schema(), other.docID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.outlinks)) {
        this.outlinks = data().deepCopy(fields()[2].schema(), other.outlinks);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'docID' field */
    public java.lang.Long getDocID() {
      return docID;
    }
    
    /** Sets the value of the 'docID' field */
    public RankerSchema.Builder setDocID(long value) {
      validate(fields()[0], value);
      this.docID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'docID' field has been set */
    public boolean hasDocID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'docID' field */
    public RankerSchema.Builder clearDocID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'url' field */
    public java.lang.CharSequence getUrl() {
      return url;
    }
    
    /** Sets the value of the 'url' field */
    public RankerSchema.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'url' field has been set */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'url' field */
    public RankerSchema.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'outlinks' field */
    public java.util.List<java.lang.CharSequence> getOutlinks() {
      return outlinks;
    }
    
    /** Sets the value of the 'outlinks' field */
    public RankerSchema.Builder setOutlinks(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.outlinks = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'outlinks' field has been set */
    public boolean hasOutlinks() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'outlinks' field */
    public RankerSchema.Builder clearOutlinks() {
      outlinks = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public RankerSchema build() {
      try {
        RankerSchema record = new RankerSchema();
        record.docID = fieldSetFlags()[0] ? this.docID : (java.lang.Long) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.outlinks = fieldSetFlags()[2] ? this.outlinks : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
